# (c) @mschoeffel

#-----------------------------------------------------------------------------------------------------------------------
## Log level ##
#-----------------------------------------------------------------------------------------------------------------------
## defines the border of the levels that get logged
## errors with a lower level than here defined are not logged
#-----------------------------------------------------------------------------------------------------------------------
# Default:
# 0 = all errors are logged
# 1 = low, medium, high errors are logged
# 2 = medium and high errors are logged
# 3 = only high errors are logged
# -1 = no errors are logged
custom.log.level=0

#-----------------------------------------------------------------------------------------------------------------------

# New line character
custom.log.newlinechar=\n

#-----------------------------------------------------------------------------------------------------------------------

# Logmessage components set together:
## [TIME](optional)[MAIN]
## [ADDITIONAL](optional)
## [ADDITIONAL_ELEMENTS](optional)
## [ERROR](optional)
## [ERROR_INFORMATION](optional)
## [STACKTRACE](optional)
## [STACKTRACE_ELEMENTS](optional)


#-----------------------------------------------------------------------------------------------------------------------
## TIME ##
#-----------------------------------------------------------------------------------------------------------------------
## This seqnence will log the date and time in front of the main message
## This sequence will be displayed in the fromat(if [time] equals true):
## [TIME_WITH_THE_PATTERN_OF_timepattern][timeseperator]
#-----------------------------------------------------------------------------------------------------------------------
# Should the time section be logged (true/false)
custom.log.msg.time.show=true
# Pattern of the logged time
custom.log.msg.time.pattern=yyyy-MM-dd HH:mm:ss
# Seperator between time and main section
custom.log.msg.time.sep=\u0020-\u0020


#-----------------------------------------------------------------------------------------------------------------------
## MAIN ##
#-----------------------------------------------------------------------------------------------------------------------
## This sequence will log the main information
## This sequence will be displayed in the format:
## [begin][sep][LOGLEVEL_TEXT][sep][MESSAGE_OF_LOG_ENTRY][sep][end]
#-----------------------------------------------------------------------------------------------------------------------
# Text at the beginning of the main section
custom.log.msg.main.begin=[BEGIN|COMPANYNAME]
# Separator between all the parts of the main section
custom.log.msg.main.sep=\u0020
# Text at the end of the main section
custom.log.msg.main.end=[END]


#-----------------------------------------------------------------------------------------------------------------------
## ADDITIONAL ##
#-----------------------------------------------------------------------------------------------------------------------
## This section can log additional nformation like parameter or inputs given as Map<String, ?>
## This section will be displayed in the Format(if [show] equals true):
## [newlinechar][head.pre][head.text]
## (Foreach item in the map:)
## [newlinechar][item.pre][KEY_OF_MAP_ELEMENT][item.sep][VALUE_TO_THE_ELEMENT]
#-----------------------------------------------------------------------------------------------------------------------
# Should the additional section be logged (true/false)
custom.log.msg.add.show=true
# Sequence before additional headline
custom.log.msg.add.head.pre=
# Headline of the additional sequence
custom.log.msg.add.head.text=ADDITIONAL:
# Sequence before every additional entity
custom.log.msg.add.item.pre=\u0020\u0020
# Sequence between the single elements ["KEY"]item.sep["VALUE"]
custom.log.msg.add.item.sep=:\u0020


#-----------------------------------------------------------------------------------------------------------------------
## ERROR ##
#-----------------------------------------------------------------------------------------------------------------------
## This sequence can log the the error of an exception
## This sequence will be displayed in the format(if [show] equals true)
## [newlinechar][head.pre][head.text]
## [newlinechar][item.pre][EXCEPTION_CLASS_NAME][item.sep][LOCALIZED_MESSAGE_OF_EXCEPTION]
#-----------------------------------------------------------------------------------------------------------------------
# Should the error section be logged (true/false)
custom.log.msg.err.show=true
# Sequence before error headline
custom.log.msg.err.head.pre=
# Headline of the error sequence
custom.log.msg.err.head.text=ERROR:
# Sequence before the error information
custom.log.msg.err.item.pre=\u0020\u0020
# Seperator between exception class and message in the error information [EXCEPTION_CLASS]item.sep[EXCEPTION_MESSAGE]
custom.log.msg.err.item.sep=:\u0020


#-----------------------------------------------------------------------------------------------------------------------
## STACK ##
#-----------------------------------------------------------------------------------------------------------------------
## This sequence can log the stacktrace of an exception with limits on lines
## This section will be displayed in the format(if [stack] equals true):
## [newlinechar][head.pre][head.stack]
## (Foreach stacktrace line within the lines.min and lines.max limit:)
## [newlinechar][item.pre][STACKTRACE_ELEMENT]
#-----------------------------------------------------------------------------------------------------------------------
# Should the stacktrace section be logged (true/false)
custom.log.msg.stack.show=true
# Sequence before stacktrace headline
custom.log.msg.stack.head.pre=
# Headline of the stacktrace sequence
custom.log.msg.stack.head.text=STACK:
# Sequence before every stacktrace entity
custom.log.msg.stack.item.pre=\u0020\u0020
# Minimum number of lines to log from the Stacktrace if -1 the whole stacktrace will be logged
custom.log.msg.stack.items.lines.min=5
# Maximum number of lines to log from the Stacktrace
custom.log.msg.stack.items.lines.max=10
# Border, when the LogLevel is higher than this given level the linex.max will be used instead of the normal lines.min
custom.log.msg.stack.items.lines.border=4